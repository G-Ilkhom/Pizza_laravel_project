В рамках задания для Backend-стажировки на PHP и Laravel было выполнено следующее:

1) Были созданы таблицы в базе данных pizza_db. В таблицах были определены следующие сущности: 
* address
* delivery_method
* payment_method
* products
* product_categories
* user

2) Для каждой из перечисленных таблиц были созданы соответствующие модели и миграции. Модели отражают структуру данных таблиц, а миграции позволяют создать таблицы в базе данных.

3) Была создана миграция для таблиц roles и Orders. Таким образом, была расширена функциональность базы данных.

4) Было осуществлено подключение к базе данных с использованием database.sqlite. Это позволило установить связь между Laravel и базой данных.

5) Были созданы маршруты, контроллеры и методы для реализации необходимого функционала. Для создания API были использованы Laravel API Resource Controllers, которые позволяют упростить процесс создания RESTful-сервисов.

6) Были созданы соответствующие контроллеры для каждого маршрута. Контроллеры содержат логику обработки запросов, связанных с каждым маршрутом.

7) Был установлен Swagger, инструмент для создания интерактивной документации к API. Swagger позволяет автоматически сгенерировать описание API на основе аннотаций в коде.

8) Были продублированы контроллеры и добавлена документация в формате Swagger.

9) Были написаны методы, пути, описания, RequestBody и Response.

9) Были написаны следующие api:
* GET /api/posts (создание)
* POST /api/posts (список)
* GET /api/posts/{post} (единичная запись)
* DELETE /api/posts/{post} (удаление)
* PATCH /api/posts/{post} (обновление)

10) Была установлена библиотека JWT (JSON Web Tokens), которая позволяет осуществлять аутентификацию и авторизацию пользователей. Для работы с JWT были добавлены два метода в модель user: getJWTIdentifier() и getJWTCustomClaims().

11) Была создана форма регистрации с помощью установки Breeze. Breeze это инструмент, упрощающий разработку аутентификации и авторизации в Laravel. Для проверки необходима версия PHP выше 8 и Laravel выше 9, иначе вместо формы будет @vite('resources/js/app.js'))

12) Были созданы эндпоинты для регистрации новых пользователей (POST /api/register) и авторизации уже зарегистрированных пользователей (POST /api/login).

13) Были защищены маршруты и добавлена авторизация. Для доступа к защищенным маршрутам необходимо включить токен, который можно получить в Postman, используя метод авторизации. Это обеспечивает безопасность доступа к API.